package com.example.shenghuobang.Charge;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.example.shenghuobang.CommonValue;
import com.example.shenghuobang.MonPickerDialog;
import com.example.shenghuobang.R;
import com.example.shenghuobang.R.id;
import com.example.shenghuobang.R.layout;
import com.example.shenghuobang.Unforget.UnforgetActivity;

import sqliteDataBase.Model.Charge;
import sqliteDataBase.Model.ChargeStatistic;
import android.app.AlertDialog;
import android.app.DatePickerDialog;
import android.app.ListActivity;
import android.content.DialogInterface;
import android.content.Intent;
import android.database.Cursor;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.util.Log;
import android.view.Gravity;
import android.view.KeyEvent;
import android.view.View;
import android.view.ViewGroup;
import android.view.View.OnClickListener;
import android.view.ViewGroup.LayoutParams;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.DatePicker;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.ListView;
import android.widget.SimpleAdapter;
import android.widget.TextView;
import android.widget.Toast;

public class ChargeActivity extends ListActivity {
	
	private final int WHATE_READ_FAILED = 1;
	private final int WHATE_READ_LOAD_DATA = 2;
	private final int WHATE_READ_STATISTIC_FAILED = 3;
	private final int WHATE_READ_STATISTIC_LOAD_DATA = 4;
	
	private ImageView imageAddCharge;
	private TextView tvInMonthSum;
	private TextView tvOutMonthSum;
	private TextView tvBalance;
	private TextView tvYear;
	private TextView tvMonth;
	
	private LinearLayout llTimeSelector;
	
	//private ChargeAdapter adapter;
	private ListChargeStatisticAdapter listMessageAdapter;
	private sqliteDataBase.Bll.Charge bllCharge;
 
	@SuppressWarnings("deprecation")
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		// TODO 自动生成的方法存根
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_charge);

		bllCharge = new sqliteDataBase.Bll.Charge(ChargeActivity.this);
		
		llTimeSelector = (LinearLayout) findViewById(R.id.llTimeSelector);
		
		tvInMonthSum = (TextView) findViewById(R.id.tvInMonthSum);
		tvOutMonthSum = (TextView) findViewById(R.id.tvOutMonthSum);
		tvBalance = (TextView) findViewById(R.id.tvBalance);

		Date curDate = new Date(System.currentTimeMillis());//获取当前时间    
		
		imageAddCharge = (ImageView) findViewById(R.id.imageAddCharge);
		
		
		tvYear = (TextView) findViewById(R.id.tvYear);
		int year = curDate.getYear()+1900;
		
		tvYear.setText(String.valueOf(year)+"年");
		
		tvMonth = (TextView) findViewById(R.id.tvMonth);
		int month = curDate.getMonth()+1;
		tvMonth.setText(String.valueOf(month)+"月");

		imageAddCharge.setOnClickListener(new OnClickListener() {
			@Override
			public void onClick(View arg0) {
				Intent intent = new Intent();
                intent.setClass(ChargeActivity.this, AddChargeActivity.class);
                startActivityForResult(intent, 1);

			}
		});
		
		llTimeSelector.setOnClickListener(new OnClickListener() {
			
			Calendar calendar = Calendar.getInstance();
			@Override
			public void onClick(View arg0) {
				String strYear = tvYear.getText().toString().substring(0, 4);
				int intYear;
				intYear=Integer.parseInt(strYear);
				
				String strMonth = tvMonth.getText().toString().substring(0, 2);
				int intMonth;
				intMonth=Integer.parseInt(strMonth);
				new MonPickerDialog(ChargeActivity.this,dateListener,intYear, intMonth-1,1).show();
			}
		});
		listMessageAdapter = new ListChargeStatisticAdapter(this);
		listMessageAdapter.setListChargeAdapterListening(new ListChargeAdapterListening() {
			
			@Override
			public void deleteItem(int position) {
				sqliteDataBase.Model.ChargeStatistic modelChargeStatistic = (ChargeStatistic) listMessageAdapter.getItem(position);
				sqliteDataBase.Bll.Charge bllCharge = new sqliteDataBase.Bll.Charge(getApplicationContext());
				bllCharge.delete(modelChargeStatistic.getYear(),modelChargeStatistic.getMonth(),modelChargeStatistic.getDay());
				
				String strYear = tvYear.getText().toString().substring(0, 4);
				int intYear;
				intYear=Integer.parseInt(strYear);
				
				String strMonth = tvMonth.getText().toString().substring(0, 2);
				int intMonth;
				intMonth=Integer.parseInt(strMonth);
				setStatisticData( intYear, intMonth);
			}

			@Override
			public void onListItemClick(int position) {
				// TODO 自动生成的方法存根
				
			}
		});
	}
	DatePickerDialog.OnDateSetListener dateListener =  new DatePickerDialog.OnDateSetListener() { 
		@Override
		public void onDateSet(DatePicker datePicker, int year, int month, int dayOfMonth) {
			
			tvYear.setText(String.valueOf(year)+"年");
			tvMonth.setText(String.format("%02d",month+1)+"月");
			setListViewData();
			
		}     
	}; 

	@Override
	protected void onResume() {
		// TODO 自动生成的方法存根
		setListViewData();
		super.onResume();
	}

	private void setListViewData(){
		String strYear = tvYear.getText().toString().substring(0, 4);
		int intYear;
		intYear=Integer.parseInt(strYear);
		
		String strMonth = tvMonth.getText().toString().substring(0, 2);
		int intMonth;
		intMonth=Integer.parseInt(strMonth);
		onLoadData(intYear,intMonth);
		setStatisticData(intYear,intMonth);
	}
	
	private void onLoadData(final int year,final int month) {
		
		new Thread(new Runnable(){

			@Override
			public void run() {
				Message msg = new Message();
				List<ChargeStatistic> list = new ArrayList<ChargeStatistic>();
				for(int day=31;day>=1;day--){

					Cursor cursor = bllCharge.queryByDay(year, month, day);
					if(cursor.getCount()==0)
						continue;
					
					Double inDaySum=0.0;
					Double outDaySum=0.0;
					
					while(cursor.moveToNext()){
			    		int typeIndex = cursor.getColumnIndex("type");
			    		int sumIndex = cursor.getColumnIndex("sum");
			    		Double sum = cursor.getDouble(sumIndex);
			    		int type = cursor.getInt(typeIndex);
			    		
			    		if(type==0){
			    			inDaySum += sum;
			    		}
			    		else{
			    			outDaySum +=sum;
			    		}
			    	}
					list.add(new ChargeStatistic(year, month, day, inDaySum, outDaySum));
		    		cursor.close();
		    	}
				if(null == list || list.equals(null)){
					msg = mUIHandler.obtainMessage(WHATE_READ_FAILED);
				}else{
					msg = mUIHandler.obtainMessage(WHATE_READ_LOAD_DATA);
					msg.obj = list;
				}
				msg.sendToTarget();
			}}).start();
	}
	public void setStatisticData(final int year,final int month){
		
		
		new Thread(new Runnable(){
			
			Message msg = new Message();
			@Override
			public void run() {
				Double inMonthSum=0.0;
				Double outMonthSum=0.0;
				for(int day=31;day>=1;day--){

					Cursor cursor = bllCharge.queryByDay(year, month, day);
					if(cursor.getCount()==0)
						continue;
					
					Double inDaySum=0.0;
					Double outDaySum=0.0;
					while(cursor.moveToNext()){
			    		int typeIndex = cursor.getColumnIndex("type");
			    		int sumIndex = cursor.getColumnIndex("sum");
			    		Double sum = cursor.getDouble(sumIndex);
			    		int type = cursor.getInt(typeIndex);
			    		
			    		if(type==0){
			    			inDaySum += sum;
			    		}
			    		else{
			    			outDaySum +=sum;
			    		}
			    	}
					inMonthSum += inDaySum;
					outMonthSum += outDaySum;
		    		cursor.close();
				}
				Bundle bundle = new Bundle();
				
				bundle.putDouble("inMonthSum", inMonthSum);
				bundle.putDouble("outMonthSum", outMonthSum);
				
				msg = mUIHandler.obtainMessage(WHATE_READ_STATISTIC_LOAD_DATA);
				msg.obj = bundle;
				msg.sendToTarget();
				
			}
		}).start();
	}
	
	private Handler mUIHandler = new Handler(){
		@SuppressWarnings("unchecked")
		@Override
		public void handleMessage(Message msg){
			switch(msg.what){
			case WHATE_READ_FAILED:
				setListAdapter(null);
				tvInMonthSum.setText("收入:0");
				tvOutMonthSum.setText("支出:0");
				tvBalance.setText("结余:0");
				
				break;
			case WHATE_READ_LOAD_DATA:
				List<ChargeStatistic> list = new ArrayList<ChargeStatistic>();
				list = (ArrayList<ChargeStatistic>)msg.obj;
				listMessageAdapter.setData(list);
				setListAdapter(listMessageAdapter);
				break;
			case WHATE_READ_STATISTIC_LOAD_DATA:
				Bundle bundle = new Bundle();
				bundle = (Bundle) msg.obj;
				Double inMonthSum = bundle.getDouble("inMonthSum");
				Double outMonthSum = bundle.getDouble("outMonthSum");
				tvInMonthSum.setText( CommonValue.myFormatter.format(inMonthSum));
				tvOutMonthSum.setText(CommonValue.myFormatter.format( outMonthSum));
				Double monthBalance = inMonthSum-outMonthSum;
				tvBalance.setText(CommonValue.myFormatter.format(monthBalance));
				break;
			}
		}
		
	};

	
	@Override 
	protected void onActivityResult(int requestCode,int resultCode,Intent data){
		super.onActivityResult(requestCode,resultCode,data);   
		if(resultCode==1){  
			setListViewData();
			//Toast.makeText(getApplicationContext(), "由添加界面返回", Toast.LENGTH_SHORT).show();
		}
	}
	private long exitTime = 0;

    @Override
    public boolean onKeyDown(int keyCode, KeyEvent event) {
        if(keyCode == KeyEvent.KEYCODE_BACK && event.getAction() == KeyEvent.ACTION_DOWN){   
            if((System.currentTimeMillis()-exitTime) > 2000){  
                Toast.makeText(getApplicationContext(), "再按一次退出程序", Toast.LENGTH_SHORT).show();                                
                exitTime = System.currentTimeMillis();   
            } else {
                finish();
                //System.exit(0);
            }
            return true;   
        }
        return super.onKeyDown(keyCode, event);
    }
    
    @Override
    public void finish() {
    	//Log.i(TAG, "finish");
    	
    	super.finish();
    	overridePendingTransition(R.anim.alpha_in, R.anim.alpha_out);

    }
}